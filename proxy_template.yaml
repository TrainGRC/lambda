AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyApiGateway
      Parameters:
        endpointConfigurationTypes: REGIONAL
  MyApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: MyApiGateway
      PathPart: '{proxy+}'
      ParentId:
        Fn::GetAtt:
        - MyApiGateway
        - RootResourceId
  MyApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: MyApiGateway
      ResourceId:
        Ref: MyApiResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
        - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn:
              Fn::GetAtt:
              - MyLambda
              - Arn
  MyApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: MyApiMethod
    Properties:
      RestApiId:
        Ref: MyApiGateway
      StageName: api
  MyLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: infantsense
        S3Key: 8bdf967e0418b05cce981698b2be2e5c
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.9
      Timeout: 15
      MemorySize: 128
      Environment:
        Variables:
          PARAM1: VALUE1
          PARAM2: VALUE2
      TracingConfig:
        Mode: Active
  MyLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName:
        Ref: MyLambda
      Description: v1
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: LambdaS3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource: arn:aws:s3:::my_bucket/*
      - PolicyName: LambdaCloudWatchLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
            Resource: '*'
  ApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - MyLambda
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/*/*
Outputs:
  ApiEndpoint:
    Value:
      Fn::Sub: https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com
    Description: Endpoint URL for API Gateway
